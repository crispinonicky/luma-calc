{"version":3,"sources":["components/Probability.jsx","components/Modal.jsx","App.js","serviceWorker.js","index.js"],"names":["Probability","Component","state","counter","encounterRate","encounterInput","probability","lumaOdds","desiredOdds","until50","until90","encounter50","encounter90","input","reset","setState","console","log","addOne","parseInt","subtractOne","showCounter","className","showProbability","toFixed","showUntil","Math","round","handleSubmit","e","preventDefault","handleChange","target","value","handleEncounter","this","onSubmit","type","min","onChange","required","max","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b07c5ec.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Redirect, Link } from 'react-router-dom';\nimport Modal from './Modal';\n\nexport default class Probability extends Component {\n  state = {\n    counter: 0,\n    encounterRate: 1,\n    encounterInput: 100,\n    probability: \"\",\n    lumaOdds: 0,\n    desiredOdds: 0,\n    until50: 4159,\n    until90: 13815,\n    encounter50: 4159,\n    encounter90: 13815,\n    input: 0\n  };\n\n  reset = () => {\n    this.setState(\n      {\n        counter: 0\n      },\n      () => {\n        console.log(\"Successfully reset the counter\");\n        console.log(this.state.counter);\n      }\n    );\n  };\n\n  addOne = () => {\n    this.setState(\n      {\n        counter: this.state.counter + parseInt(1),\n        until50: this.state.until50 - 1,\n        until90: this.state.until90 - 1,\n        encounter50: this.state.encounter50 - 1,\n        encounter90: this.state.encounter90 - 1\n      },\n      () => {\n        this.setState(\n          {\n            lumaOdds: (1 - (5999 / 6000) ** this.state.counter) * 100,\n            desiredOdds: (1 - ((6000 / this.state.encounterRate - 1)/(6000 / this.state.encounterRate)) ** this.state.counter) * 100\n          },\n          () => {\n            console.log(\"Odds of getting a luma are\", this.state.lumaOdds);\n          }\n        );\n        console.log(\"Successfully added to the counter\");\n        console.log(this.state.counter);\n      }\n    );\n  };\n\n  subtractOne = () => {\n    if (this.state.lumaOdds !== 0) {\n      this.setState(\n        {\n          counter: this.state.counter - 1,\n          until50: this.state.until50 + 1,\n          until90: this.state.until90 + 1,\n          encounter50: this.state.encounter50 + 1,\n          encounter90: this.state.encounter90 + 1,\n        },\n        () => {\n          this.setState(\n            {\n              lumaOdds: (1 - (5999 / 6000) ** this.state.counter) * 100,\n              desiredOdds: (1 - ((6000 / this.state.encounterRate - 1)/(6000 / this.state.encounterRate)) ** this.state.counter) * 100\n            },\n            () => {\n              console.log(\"Odds of getting a luma are\", this.state.lumaOdds);\n            }\n          );\n          console.log(\"Successfully subtracted from the counter\");\n          console.log(this.state.counter);\n        }\n      );\n    }\n  };\n\n  showCounter = () => {\n    return (\n      <div>\n        <h1 className=\"beeg\">{this.state.counter}</h1>\n      </div>\n    );\n  };\n\n  showProbability = () => {\n    return (\n      <div>\n      <div>\n        <h2>Odds of having gotten any Luma: {this.state.lumaOdds.toFixed(3)}%</h2>\n        {this.showUntil()}\n      </div>\n      <div>\n    <h2>Odds of having gotten your desired Luma: {this.state.desiredOdds.toFixed(3)}%</h2>\n    <div>\n        <p>Until 50%: {Math.round(this.state.encounter50)}</p>\n        <p>Until 90%: {Math.round(this.state.encounter90)}</p>\n      </div>\n      </div>\n      </div>\n    );\n  };\n\n  reset = () => {\n    this.setState({\n      counter: 0,\n      encounterRate: 1,\n      encounterInput: 100,\n      probability: \"\",\n      lumaOdds: 0,\n      desiredOdds: 0,\n      until50: 4159,\n      until90: 13815,\n      encounter50: 4159,\n      encounter90: 13815,\n      input: 0\n    });\n  };\n\n  showUntil = () => {\n    return (\n      <div>\n        <p>Until 50%: {this.state.until50}</p>\n        <p>Until 90%: {this.state.until90}</p>\n      </div>\n    );\n  };\n\n  handleSubmit = (e) => {\n    console.log(this.state.input)\n\n    this.setState({\n      counter: parseInt(this.state.input)\n    }, ()=> {\n      console.log(this.state)\n      this.setState(\n        {\n          lumaOdds: (1 - (5999 / 6000) ** this.state.counter) * 100,\n          desiredOdds: (1 - ((6000 / this.state.encounterRate - 1)/(6000 / this.state.encounterRate)) ** this.state.counter) * 100,\n          until50: 4159 - this.state.input,\n          until90: 13815 - this.state.input,\n          encounter50: 4159 / this.state.encounterRate - this.state.counter,\n          encounter90: 13815 / this.state.encounterRate - this.state.counter,\n          input: 0\n        },\n        () => {\n          console.log(\"Odds of getting a luma are\", this.state.lumaOdds);\n        }\n      );\n    })\n    e.preventDefault()\n  }\n\n  handleChange = (e) => {\n        this.setState({\n          input: e.target.value\n        })\n  }\n\n  handleEncounter = (e) => {\n    this.setState({\n      encounterInput: parseInt(e.target.value)\n    }, ()=> {\n      console.log(this.state)\n      this.setState({\n        encounterRate: this.state.encounterInput / 100\n      }, () => {\n        this.setState({\n          encounter50: (4159 / this.state.encounterRate) - this.state.counter,\n          encounter90: (13815 / this.state.encounterRate) - this.state.counter,\n          desiredOdds: (1 - ((6000 / this.state.encounterRate - 1)/(6000 / this.state.encounterRate)) ** this.state.counter) * 100\n        }, () => {\n          console.log(this.state)\n        })\n      })\n      if (this.state.encounterInput > 100) {\n        this.setState({\n          encounterInput: 100\n        }, ()=> {\n          this.setState({\n            encounterRate: this.state.encounterInput / 100\n          }, ()=> {\n            console.log(this.state)\n          })\n        })\n      } else if (!this.state.encounterInput) {\n      this.setState({\n        encounterInput: 0\n      }, ()=> {\n        this.setState({\n          encounterRate: this.state.encounterInput / 100\n        }, ()=> {\n          console.log(this.state)\n        })\n      })\n    } \n    })\n    e.preventDefault()\n  }\n\n  render() {\n    return (\n      <div>\n        {this.showCounter()}\n\n<div className = \"forms\">\n        <form className = \"manual\" onSubmit={this.handleSubmit}>\n            <span>\n              Set counter:\n              \n              </span>\n            <input\n              type=\"number\"\n              min = \"0\"\n              value={this.state.input}\n              onChange={this.handleChange}\n              required\n            />\n          <button>Submit</button>\n        </form>\n\n        <br />\n\n        <form className = \"manual encounter\" onSubmit={this.handleSubmit}>\n            <span>\n              Encounter rate:\n              \n              </span>\n            <input\n              type=\"number\"\n              min = \"1\"\n              max = \"100\"\n              value={this.state.encounterInput}\n              onChange={this.handleEncounter}\n              required\n            />\n            <span>%</span>\n        </form>   \n\n        </div>     \n\n        <br />\n        <div className=\"counter-buttons\">\n          <button className=\"subtract\" onClick={this.subtractOne}>\n            -\n          </button>\n          <button className=\"add\" onClick={this.addOne}>\n            +\n          </button>\n        </div>\n\n        {this.showProbability()}\n\n\n<div>\n        <button className=\"reset\" onClick={this.reset}>\n          Reset Counter\n        </button>\n\n</div>\n\n            <div className=\"egg\">\n            </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class Modal extends Component {\n  render() {\n    return (\n      <div>\n        test\n      </div>\n    )\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Probability from \"./components/Probability\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Luma Counter</h1>\n      <Probability />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}