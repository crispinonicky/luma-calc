{"version":3,"sources":["components/Probability.jsx","App.js","serviceWorker.js","index.js"],"names":["Probability","state","counter","probability","lumaOdds","until50","until90","reset","setState","console","log","addOne","subtractOne","showCounter","className","showProbability","toFixed","showUntil","this","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mPAEqBA,E,2MACnBC,MAAQ,CACNC,QAAS,EACTC,YAAa,GACbC,SAAU,EACVC,QAAS,KACTC,QAAS,O,EAGXC,MAAQ,WACN,EAAKC,SACH,CACEN,QAAS,IAEX,WACEO,QAAQC,IAAI,kCACZD,QAAQC,IAAI,EAAKT,MAAMC,a,EAK7BS,OAAS,WACP,EAAKH,SACH,CACEN,QAAS,EAAKD,MAAMC,QAAU,EAC9BG,QAAS,EAAKJ,MAAMI,QAAU,EAC9BC,QAAS,EAAKL,MAAMK,QAAU,IAEhC,WACE,EAAKE,SACH,CACEJ,SAAsD,KAA3C,WAAK,KAAO,IAAS,EAAKH,MAAMC,YAE7C,WACEO,QAAQC,IAAI,6BAA8B,EAAKT,MAAMG,aAGzDK,QAAQC,IAAI,qCACZD,QAAQC,IAAI,EAAKT,MAAMC,a,EAK7BU,YAAc,WACgB,IAAxB,EAAKX,MAAMG,UACb,EAAKI,SACH,CACEN,QAAS,EAAKD,MAAMC,QAAU,EAC9BG,QAAS,EAAKJ,MAAMI,QAAU,EAC9BC,QAAS,EAAKL,MAAMK,QAAU,IAEhC,WACE,EAAKE,SACH,CACEJ,SAAsD,KAA3C,WAAK,KAAO,IAAS,EAAKH,MAAMC,YAE7C,WACEO,QAAQC,IAAI,6BAA8B,EAAKT,MAAMG,aAGzDK,QAAQC,IAAI,4CACZD,QAAQC,IAAI,EAAKT,MAAMC,a,EAM/BW,YAAc,WACZ,OACE,6BACE,wBAAIC,UAAU,QAAQ,EAAKb,MAAMC,W,EAKvCa,gBAAkB,WAChB,OACE,6BACE,6DAAmC,EAAKd,MAAMG,SAASY,QAAQ,GAA/D,O,EAKNT,MAAQ,WACN,EAAKC,SAAS,CACZN,QAAS,EACTE,SAAU,K,EAIda,UAAY,WACV,OACE,6BACE,yCAAe,EAAKhB,MAAMI,SAC1B,yCAAe,EAAKJ,MAAMK,W,wEAM9B,OACE,6BACGY,KAAKL,cAEN,6BACA,yBAAKC,UAAY,mBACjB,4BAAQA,UAAU,WAAWK,QAASD,KAAKN,aAA3C,KAGA,4BAAQE,UAAU,MAAMK,QAASD,KAAKP,QAAtC,MAKCO,KAAKH,kBAELG,KAAKD,YAEN,4BAAQH,UAAU,QAAQK,QAASD,KAAKX,OAAxC,sB,GAtHiCa,aCW1BC,MATf,WACE,OACE,yBAAKP,UAAU,OACb,sDACA,kBAAC,EAAD,QCIcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.682df00a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Probability extends Component {\n  state = {\n    counter: 0,\n    probability: \"\",\n    lumaOdds: 0,\n    until50: 4159,\n    until90: 13815\n  };\n\n  reset = () => {\n    this.setState(\n      {\n        counter: 0\n      },\n      () => {\n        console.log(\"Successfully reset the counter\");\n        console.log(this.state.counter);\n      }\n    );\n  };\n\n  addOne = () => {\n    this.setState(\n      {\n        counter: this.state.counter + 1,\n        until50: this.state.until50 - 1,\n        until90: this.state.until90 - 1\n      },\n      () => {\n        this.setState(\n          {\n            lumaOdds: (1 - (5999 / 6000) ** this.state.counter) * 100\n          },\n          () => {\n            console.log(\"Odds of getting a luma are\", this.state.lumaOdds);\n          }\n        );\n        console.log(\"Successfully added to the counter\");\n        console.log(this.state.counter);\n      }\n    );\n  };\n\n  subtractOne = () => {\n    if (this.state.lumaOdds !== 0) {\n      this.setState(\n        {\n          counter: this.state.counter - 1,\n          until50: this.state.until50 + 1,\n          until90: this.state.until90 + 1\n        },\n        () => {\n          this.setState(\n            {\n              lumaOdds: (1 - (5999 / 6000) ** this.state.counter) * 100\n            },\n            () => {\n              console.log(\"Odds of getting a luma are\", this.state.lumaOdds);\n            }\n          );\n          console.log(\"Successfully subtracted from the counter\");\n          console.log(this.state.counter);\n        }\n      );\n    }\n  };\n\n  showCounter = () => {\n    return (\n      <div>\n        <h1 className=\"beeg\">{this.state.counter}</h1>\n      </div>\n    );\n  };\n\n  showProbability = () => {\n    return (\n      <div>\n        <h2>Odds of having gotten a Luma: {this.state.lumaOdds.toFixed(3)}%</h2>\n      </div>\n    );\n  };\n\n  reset = () => {\n    this.setState({\n      counter: 0,\n      lumaOdds: 0\n    });\n  };\n\n  showUntil = () => {\n    return (\n      <div>\n        <p>Until 50%: {this.state.until50}</p>\n        <p>Until 90%: {this.state.until90}</p>\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        {this.showCounter()}\n\n        <br />\n        <div className = 'counter-buttons'>\n        <button className=\"subtract\" onClick={this.subtractOne}>\n          -\n        </button>\n        <button className=\"add\" onClick={this.addOne}>\n          +\n        </button>\n        </div>\n\n        {this.showProbability()}\n\n        {this.showUntil()}\n\n        <button className=\"reset\" onClick={this.reset}>\n          Reset Counter\n        </button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Probability from \"./components/Probability\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Temtem Luma Calculator</h1>\n      <Probability />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}